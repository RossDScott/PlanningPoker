@using Microsoft.AspNetCore.SignalR.Client

@if (currentRoom != null)
{
    <div class="d-flex flex-column justify-center">
        @if (!currentRoom.Observing)
        {
            <Cards OnCardClick="OnCardVote" CurrentEstimate="@currentEstimate"></Cards>
        }

        <div class="d-flex justify-center mt-5">
            <div>
                <MudPaper Width="300px">
                    <MudTable Items="voters" Hover="true" Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh><MudText Typo="Typo.h6">Name</MudText></MudTh>
                            <MudTh><MudText Typo="Typo.h6">Estimate</MudText></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd><MudText Typo="Typo.body1">@context.Name</MudText></MudTd>
                            <MudTd>
                                @showEstimate(context)
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
                @if (observers.Any())
                {
                    <MudPaper Class="mt-3 pa-3">
                        <MudText Typo="Typo.h6">Observers: @observersCSV</MudText>
                    </MudPaper>
                }
            </div>

            <div class="ml-5">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5" Align="Align.Center">Estimate Controls</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardActions>
                        <MudStack Row="true" Justify="Justify.Center">
                            <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="SendResetEstimates">Reset Estimates</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="SendRevealEstimates">Show Estimates</MudButton>
                        </MudStack>
                    </MudCardActions>
                </MudCard>
            </div>
        </div>
    </div>
}

@code {
    RenderFragment showEstimate(RoomUser user) => (showEstimates, user.Estimate) switch
    {
        (_, null)      => @<MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary" Class="ma-0" Style="visibility: hidden"></MudChip>,
        (true, _)  => @<MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary" Class="ma-0">
                                    <span style="min-width: 1.2em; text-align: center">@user.Estimate</span>
                                   </MudChip>,
        (false, _) => @<MudChip T="string" Variant="Variant.Outlined" Color="Color.Default" Class="ma-0">
                                      <span style="min-width: 1.2em; text-align: center"></span>
                                   </MudChip>
    };
}

@code {
    private List<RoomUser> users = [];
    private Room? currentRoom = null;
    private bool showEstimates = false;
    private string? currentEstimate = null;

    [Parameter, EditorRequired]
    public required HubConnection HubConnection { get; set; }

    [Parameter, EditorRequired]
    public required string Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await WireUpHub();
    }

    private List<RoomUser> voters => users.Where(x => !x.Observing).ToList();
    private IEnumerable<string> observers => users.Where(x => x.Observing).Select(x => x.Name).ToArray();
    private string observersCSV => string.Join(", ", observers)
                                         .Trim();

    public async Task JoinRoom(Room room)
    {
        currentRoom = room;
        await HubConnection.SendAsync("JoinRoom", currentRoom.Id, room.Observing);
    }

    public async Task ExitRoom()
    {
        await HubConnection.SendAsync("ExitRoom", currentRoom!.Id);
        currentRoom = null;
    }

    private async Task SendResetEstimates()
    {
        await HubConnection.SendAsync("ResetEstimates", currentRoom!.Id);
    }

    private async Task SendRevealEstimates()
    {
        await HubConnection.SendAsync("RevealEstimates", currentRoom!.Id);
    }

    private async Task WireUpHub()
    {
        HubConnection.On<string, string, bool>("JoinRoom", OnJoinRoom);
        HubConnection.On<string, string, bool>("AnnounceAlreadyInTheRoom", OnAnnounceAlreadyInTheRoom);
        HubConnection.On<string, string>("SubmitEstimate", OnSubmitEstimate);
        HubConnection.On<string>("RemoveFromRoom", RemoveFromRoom);
        HubConnection.On("RevealEstimates", OnRevealEstimates);
        HubConnection.On("ResetEstimates", OnResetEstimates);
    }

    private async Task OnJoinRoom(string userId, string userName, bool observing)
    {
        var existingUser = users.SingleOrDefault(x => x.Id == userId);

        if(existingUser != null)
        {
            existingUser.Observing = observing;
        }
        else
        {
            users.Add(new RoomUser(userId, userName, observing));
        }

        await HubConnection.SendAsync("AnnounceAlreadyInTheRoom", userId, currentRoom!.Observing);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAnnounceAlreadyInTheRoom(string userId, string userName, bool observing)
    {
        if (users.Any(x => x.Id == userId))
            return;

        users.Add(new RoomUser(userId, userName, observing));
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSubmitEstimate(string userId, string estimate)
    {
        var user = users.SingleOrDefault(x => x.Id == userId);

        if (user is null)
            return;

        user.Estimate = estimate;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRevealEstimates()
    {
        showEstimates = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnResetEstimates()
    {
        showEstimates = false;
        currentEstimate = null;
        users.ForEach(x => x.Estimate = null);
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveFromRoom(string userId)
    {
        var user = users.SingleOrDefault(x => x.Id == userId);

        if (user is null)
            return;

        users.Remove(user);

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCardVote(string estimate)
    {
        if (currentRoom == null)
            return;

        currentEstimate = estimate;

        await HubConnection.SendAsync("SubmitEstimate", currentRoom.Id, estimate);
    }
}
